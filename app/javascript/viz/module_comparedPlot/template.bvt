svg{
    Component {
        x = config.gridwidth;y = config.gridheight
        @if(plotType == "bar"){
            Container {
                Container {
                    padding = config.padding
                    x = -40
                    Legend{
                        title = "Sample List"
                        @let now=barlegenddata[buttonkey-1]
                        @let nowlegendata = Object.values(now)
                        data = nowlegendata[0]
                        padding = 10
                        lineHeight = 13
                        legendWidth = 15
                        label.fontSize = 10
                        :legend(d) { 
                            Component {
                                Rect {
                                    x = 2.5;y = 2.5
                                    // stroke = "#666" ; strokeWidth = 0.8
                                    height = 8;width = 10
                                    fill = d.fill
                                }
                            }				
                        }
                    }          
                }
                //method
                Container{
                    x = 140 + maxsampletextlength - 77.77 + 16.6
                    Columns{
                        //y = -config.gridheight/2
                        y = -45
                        @for(item,i) in chosenMethod{
                            Container {
                                padding = config.padding
                                Rect {
                                    height = 45
                                    width = config.gridwidth-config.padding*2
                                    stroke = "#000"
                                    fill = "none"
                                }
                                Text.centered{
                                    text = item
                                    x = config.gridwidth/2-3
                                    y = 22.5
                                    anchor = @anchor("middle", "center")
                                    fontSize = methodFontsize 
                                }
                            }
                        }
                    }                
                }
                //cell data
                Container{
                    x = 140 + maxsampletextlength - 77.77   + 16.6 - 45
                    Rows{
                        @for (citem,cindex) in celldata{
                            Container{
                                padding = config.padding
                                Rect {
                                    width = 45
                                    height = config.gridheight - 2*config.padding 
                                    stroke = "#000"
                                    fill = "none"
                                }
                                Text.centered {
                                    text = citem
                                    //x = config.gridwidth/4-7
                                    x = 22.5
                                    y = config.gridheight/2 + config.padding
                                    //y = 22.5
                                    anchor = @anchor("middle", "center")
                                    rotation= @rotate(-90)
                                    fontSize = cellFontsize 
                                }
                            }
                        }
                    }
                }

                Columns {
                    x = 140 + maxsampletextlength - 77.77   + 16.6
                    Columns{
                        @for (item,index) in BarData{
                            @let ditem = item[buttonkey-1]
                            @let ditem2 = BarData2[index][buttonkey-1]
                            @let pitem = Object.values(ditem)[0] 
                            @let pitem2 = Object.values(ditem2)[0]
                            @if index != (methoddata.length-1){
                                Container{
                                    Rows {
                                        @for (i,indexp) in pitem{
                                            XYPlot {
                                                padding = config.padding
                                                height =config.gridheight; width = config.gridwidth;
                                                @let data = Object.values(i)[0]
                                                @let data2 = Object.values(pitem2[indexp])[0]
                                                data = {
                                                    data1:data,
                                                    data2:data2
                                                }
                                            
                                                flip = false
                                                discreteCategory = true
                                                valueRange = valuerange
                                                dataHandler = {
                                                    data1: {
                                                        value: d => d[1],
                                                        pos: d => d[0],
                                                    },
                                                    data2:{
                                                        pos:d => d[0],
                                                        value:d => 0,
                                                        min:d => d[1]
                                                    }
                                                }
                                                Rect{
                                                    width = 100%
                                                    height = 100%
                                                    stroke = "#000"
                                                    fill = "none"
                                                }
                                                Bars{
                                                    data = "data1"
                                                    :children(d){
                                                        Rect.full {
                                                            @let cat = d.pos
                                                            fill = barcolors[cat]
                                                            behavior:tooltip {
                                                                content = `Sample name: ${d.data[0]}<br>Values: ${d.data[1]}<br>`
                                                            }
                                                            // rotation = @rotate(-180)
                                                        }
                                                    }
                                                }
                                                Bars{
                                                    data = "data2"
                                                    :children(d){
                                                        Rect.full {
                                                            @let cat = d.pos
                                                            fill = barcolors[cat]
                                                            behavior:tooltip {
                                                                content = `Sample name: ${d.data[0]}<br>Values: ${d.data[1]}<br>`
                                                            }
                                                            // rotation = @rotate(-180)
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                            
                                }
                            }
                            @if index == (methoddata.length-1) {
                                Container{
                                    Rows {
                                        @for (i,indexp) in pitem{
                                            XYPlot {
                                                padding = config.padding
                                                height = config.gridheight ;width = config.gridwidth;
                                                @let data = Object.values(i)[0]
                                                @let data2 = Object.values(pitem2[indexp])[0]
                                                data = {
                                                    data1:data,
                                                    data2:data2
                                                }
                                                discreteCategory = true 
                                                valueRange = valuerange
                                                dataHandler = {
                                                    data1: {
                                                        value: d => d[1],
                                                        pos: d => d[0],
                                                    },
                                                    data2:{
                                                        value:d=>0,
                                                        pos:d=>d[0],
                                                        min:d=>d[1]
                                                    }
                                                }
			                                    Axis("right") {x=100%;includeEndTicks = true}
                                                Rect{
                                                    width = 100%
                                                    height = 100%
                                                    stroke = "#000"
                                                    fill = "none"
                                                } 
                                                Bars{
                                                    data = "data1"
                                                    :children(d){
                                                        Rect.full {
                                                            @let cat = d.pos
                                                            fill = barcolors[cat]
                                                            behavior:tooltip {
                                                                content = `Sample name: ${d.data[0]}<br>Values: ${d.data[1]}<br>`
                                                            }
                                                        }
                                                    }
                                                }
                                                Bars{
                                                    data = "data2"
                                                    :children(d){
                                                        Rect.full {
                                                            @let cat = d.pos
                                                            fill = barcolors[cat]
                                                            behavior:tooltip {
                                                                content = `Sample name: ${d.data[0]}<br>Values: ${d.data[1]}<br>`
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                }  
                            }
                    }
                }
            }

            }
            
            
            Columns{
                anchor = @anchor("center","top")
                //x = (methoddata.length*(config.gridwidth))/2 + 140
                x = (chosenMethod.length*config.gridwidth-50)/2 + 150;
                y = celldata.length*(config.gridheight)+50
                Component {
                    @let disabled = buttonkey === 1
                    width = 80; height = 30
                    Rect.full {fill = disabled ? "#555862" : "#777980"}
                    Text.centered("Prev") { x = 50%; y = 50%; fill = "#fff" }
                    cursor = disabled ? null : "pointer"
                    on:click = disabled ? null:buttonclick(-1)
                }
                Component {
                    width = 60; height = 30; x = 20
                    Text.centered {
                        x = 50%; y = 50%; fontSize = 14
                        text = buttonkey+ "/" + cellpageindex[1]
                    }
                }
                Component {
                    @let disabled = buttonkey === cellpageindex[1]
                    width = 80; height = 30; x = 20
                    Rect.full { fill = disabled ? "#555862" : "#777980" }
                    Text.centered("Next") { x = 50%; y = 50%; fill = "#fff" }
                    cursor = disabled ? null : "pointer"
                    on:click = disabled ? null:buttonclick(1)
                }
            }
        }

        @if(plotType=="pie"){
            Container {
                padding = 4
                x = -40
                Legend{
                    title = "Cell Type"
                        @let now=pielegenddata[buttonkey-1] 
                        @let nowlegendata = Object.values(now)
                        data = nowlegendata[0]
                        padding = 10
                        lineHeight = 13
                        legendWidth = 15
                        label.fontSize = 10
                        :legend(d) {
                            Component {
                                Line {  x = 50%; y1 = 1; y2 = 12; stroke = "#666" }
                                Rect {
                                    x = 2.5;y = 2.5
                                    stroke = lineColor; strokeWidth = 0.8
                                    height = 8; width = 10
                                    fill = d.fill
                                }
                                Line {  x1 = 3; x2 = 12; y = 6.5; stroke = "#666" }
                            }				
                        }
                    }          
            }
            Container{
                x = 150 + maxchosencelldatatextlength - 90
                Columns{
                    //y = -config.gridheight/2 + 12
                    y = -45
                    @for(item,i) in chosenMethod{
                        Container {
                            padding = config.padding
                            Rect {
                                //height = config.gridheight/2 - 12
                                height = 45
                                width = config.gridwidth-config.padding*2
                                stroke = "#000"
                                fill = "none"
                            }
                            Text.centered{
                                text = item
                                x = config.gridwidth/2 - config.padding
                                //y = config.gridheight/4 - 6
                                y = 22.5
                                anchor = @anchor("middle", "center")
                                fontSize = methodFontsize 
                            }
                        }
                    }
                }                
            }
            Container{
                x = 150 + maxchosencelldatatextlength - 90
                Rows{
                    x=-56
                    @let nowSample = eachSamplename[buttonkey-1]
                    @let nowSampledata = Object.values(nowSample)
                    @for (citem,cindex) in nowSample.i{
                        Container{
                            padding = config.padding
                            Rect {
                                x = 11.5;y = -0.0428*cindex
                                
                                height = config.gridheight - 7.85; width = 45;
                                stroke = "#000"
                                fill = "none"
                            }
                            Text.centered {
                                text = nowSample.i[cindex]
                                x = 60/2 + 7/2
                                y = (config.gridheight + 9)/2
                                anchor = @anchor("middle", "center")
                                rotation= @rotate(-90)
                                fontSize = sampleFontsize
                            }
                        }
                    }
                }
            }
            Columns {
                x = 150 + maxchosencelldatatextlength - 90
                Columns{
                    @for (item,index) in PieData{
                        @let ditem = item[buttonkey-1] 
                        @let pitem = Object.values(ditem)[0] 
                        Container{
                            Rows {
                                @for i in pitem{
                                    XYPlot {
                                        padding = config.padding
                                        height =config.gridheight; width = config.gridwidth;
                                        @let data = Object.values(i)[0]
                                        data = data
                                        flip = false
                                        discreteCategory = true 
                                        valueRange = [0,0.6]
                                        dataHandler = {
                                            default: {
                                                value: d => d[1],
                                                pos: d => d[0],
                                            }
                                        }
                                        Rect{
                                            width = 100%;height = 100%
                                            stroke = "#000"
                                            fill = "none"
                                        }
                                        @let plot = findNA(Object.values(i)[0])
                                        @if(plot){
                                            PieChart {
                                                data = data
											    pieProps = {
												    stroke: "white"
											    }
                                                :children(d) {
                                                    Arc {
                                                        x1 = d.start; x2 = d.end
                                                        r2 = 90%
                                                        fill = d.data.raw.color
                                                        behavior:tooltip {
					        							    content = "Category: "+ d.data.name+ "</br>Value: "+ d.data.value.toFixed(3) + "</br>Proportion: " + ((d.end-d.start)/360*100).toFixed(2) + "%" 
													    }  
                								    }
											    }
										    }
                                        }
										
                                    }
                                }
                            } 
                        } 
                    }
                }
        
            }

            Columns{
                anchor = @anchor("center","top")
                
                x = (chosenMethod.length*config.gridwidth-50)/2 + 150;
                y = config.gridheight*(eachSamplename[buttonkey-1].i.length+1)

                Component {
                    @let disabled = buttonkey === 1
                    width = 80; height = 30
                    Rect.full {fill = disabled ? "#555862" : "#777980"}
                    Text.centered("Prev") { x = 50%; y = 50%; fill = "#fff" }
                    cursor = disabled ? null : "pointer"
                    on:click = disabled ? null:buttonclick(-1)
                }
                Component {
                    width = 60; height = 30; x = 20
                    Text.centered {
                        x = 50%; y = 50%; fontSize = 14
                        text = buttonkey+ "/" + cellpageindex[1]
                    }
                }
                Component {
                    @let disabled = buttonkey === cellpageindex[1]
                    width = 80; height = 30; x = 20
                    Rect.full { fill = disabled ? "#555862" : "#777980" }
                    Text.centered("Next") { x = 50%; y = 50%; fill = "#fff" }
                    cursor = disabled ? null : "pointer"
                    on:click = disabled ? null:buttonclick(1)
                }
            }
        }

    }
}
