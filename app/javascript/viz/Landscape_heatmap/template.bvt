svg{
    Component{
        Container {
            x = 40;y = 30

            Container{
                Rect {
                    x = 20;y = 30
                    width = 180;height = cellList.length *15 + 10
                    stroke = "black"
                    fill = "none"
                }      
                @for (item, index) in cellList {
                    Rect {
                        key = index
                        x = 30;y = (cellList.length - index) * 15 -2.5 + 30
                        height = 5;width = 12
                        fill = result.stackescolors[index]
                    }
                    Text {
                        key = index
                        x = 50;y = (cellList.length - index) * 15 - 5 + 30
                        text = item
                        fill = "#000"
                        fontSize = 10
                    }
                }
            }
            Container {
                x = 260; y = 30
                XYPlot {
                    height = cellList.length *15 + 10;
                    width = result.useData[sampleList.length-1].col*(gridPlotWidth-2)
                    discreteCategory = true
                    valueRange = [0,1]
                    hasPadding = true
                    data = result.result
                    Rect{
                        width = 100%;height = 100%
			            stroke = "none"
			            fill = "none"
                    }
                    stackedData = {
                        stacked: result.classifications
                    }
                    StackedBars {
                        data = "stacked"   
                        :children(d){
                            Rect.full{
                                fill = result.colorMap[d.key]
                                stroke = "white"
                                behavior:tooltip{
                                    content = `Sample Name: ${d.data.data[0]} <br> Cell:${d.key} <br> Values: ${d.data.data[1]}<br>`
                                }
                                width = gridPlotWidth-1
                            }
                        }
                    }
                }
            }
        }

        Container{
            x = 40;y = cellList.length *15 + 90
            Container {
                x = 280 + result.useData[sampleList.length-1].col*(gridPlotWidth-2)
                @for(d,i) in result.columns{
                    @if(d != "P-value"){
                        Text {
                            text = d
                            y = (i+1)*(gridPlotheight) + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 10
                        }
                    }
                }
            }
            Container {
                x = 252; 
                @for(d,i) in result.useData{
                    Component {
                        key = i
                        x = d.col * (gridPlotWidth-2)
                        y = d.row * gridPlotheight
                        Rect.full{
                            height = gridPlotheight
                            width = gridPlotWidth -1
                            fill = d.data>=0? gbcolorScheme.get(d.data/maxxx):colorScheme.get(d.data/-maxxx)
                            stroke = "white"
                            behavior:tooltip{
                                content = "Sample Name:" + addNames[d.col-1] + "<br>" + "Cell: "+d.name +"<br>" + "Value:"+d.data + "<br>" //+ "pValue: " + d.pValue
                            }
                        }
                    }
                }
            }
            
        }
        Container {
            x = 40;y = cellList.length *15 + 90
            Rect{
                x = 190;y = result.useData[0].row*gridPlotheight //红色
                fill = @gradient("gb")
                weidth = 50
                height = cellList.length*gridPlotheight/2
            }
            Rect{
                x = 190;y = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2 //蓝色
                fill = @gradient("kg")
                weidth = 50
                height = cellList.length*gridPlotheight/2
            }
            Axis{
                x = 210;y = result.useData[0].row*gridPlotheight
                yScale = @scale-linear(0,textmaxxx, cellList.length*gridPlotheight/2, 0)
                orientation = "right"
            }
            Axis{
                x = 210;y = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2
                yScale = @scale-linear(0, -textmaxxx, 0, cellList.length*gridPlotheight/2)
                orientation = "right"
            }
        }
        Container {
            XYPlot {
                x = 260; y = cellList.length *15 + 50
                rotation = @rotate(90)
		        height = plotSize[0] + 10
		        width = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight + 100
		        padding = padding
		        data = { boxData: result.boxdata}
		        valueRange = valueRange
		        //AxisBackground { dashArray = "1, 2"}
		        AxisBackground {
                    orientation = "vertical"
                    includeEndTicks = true
			        dashArray = "1, 2"
                }
                Rect{
                    width = 100%
			        height = 100%
			        stroke = "#000"
			        fill = "none"
                }
                Boxes {
                    showMean = true
			        data = "boxData"
			        :box (_d) {
                        Rect.full  {
                            fill = colors[0]
					        stroke = "#003366"
					        x = 33%
					        width = 33%
				        }
			        }
                    :median(d) {}
                    :mean(means) {
                        Line {x1 = 33%; x2 = 66%; stroke = "#000"}
                    }
                    :whiskle (d) {
				        Line { x1 = 41.25%; x2 = 57.75%; y1 = 0; y2 = 0; stroke = "#000" }
				        Line { x1 = 41.25%; x2 = 57.75%; y1 = 100%; y2 = 100%; stroke = "#000" }
				        Line { x1 = 50%; x2 = 50%; y1 = 0; y2 = 100%; stroke = "#0078d7"; dashArray = "3, 2" }
                    }
		        }
                Axis("left");
                Component {
                    x = -25; y = 50%
                    rotation = @rotate(-90)
                }
	        }   
        }
        Container {
            x = 20;
            Container {
                Container {
                    Component{
                        width = 180
                        height = (sortaddName.length-1) * gridPlotheight
                        x = 40;y = thirdLen + 15
                        Rect {
                            width = 100%
                            height = 100%
                            stroke = "white"
                            fill = "white"
                        }
                        @for(item,index) in additional.sortaddName{
                            @for(d,i) in legendLoc[item]{
                                Component {
                                    x = d.x; 
                                    y = (d.row-1)*gridPlotheight
                                    @if(d.data!="NA"){
                                        Rect{
                                            height = gridPlotheight
                                            width = (180-NAlength) / (d.num-1)
                                            stroke = "white"
                                            fill = item.substring(0,2)=="n_"? @gradient("age"):d.colors
                                        }
                                        Text.centered{
                                            text = replaceUpper(d.data,(180-NAlength) / (d.num-1))
                                            fontSize = 8
                                            x = (180-NAlength)/(d.num-1) * 0.5
                                            y = gridPlotheight/2
                                            anchor = @anchor("middle", "center") 
                                        }
                                    }
                                    @elsif(d.data=="NA"){
                                        Rect{
                                            height = gridPlotheight
                                            width = NAlength
                                            stroke = "white"
                                            fill = d.colors     
                                        }
                                        Text.centered{
                                            text = d.data
                                            fontSize = 8
                                            x = NAlength/2;y = 8
                                            anchor = @anchor("middle", "center") 
                                        }
                                    }
                                }
                            }
                        }
                        @for(item,index) in n_legendData{
                            Text.centered {
                                x = NAlength+10;y = (item.row-0.5)*gridPlotheight
                                text = item.min
                                fontSize = 8
                            }
                            Text.centered {
                                x = 170;y = (item.row-0.5)*gridPlotheight
                                text = item.max
                                fontSize = 8
                            }

                        }
                    }
                }
            }
            Container {
                Text.centered{
                    text = title;fontSize = 14;
                    x = sampleList.length*gridPlotWidth/2 + 200; 
                    y = thirdLen-14;
                }
            }
            Container {
                x = 40;y = thirdLen
                Container {
                    x = 260 + result.useData[sampleList.length-1].col*(gridPlotWidth-2)
                    @for(d,i) in additional.sortaddName {
                        Text {
                            text = d.slice(2).replace(/_/g," ")
                            y = i * gridPlotheight + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 11
                        }
                    }
                }
                Container {
                    x = 232;
                    @for(item,index) in additional.sortaddName{
                        @for(d,dindex) in heatmapLoc[item]{
                        Component {
                            x = d.col * (gridPlotWidth-2)
                            y = (d.row-23) * gridPlotheight 
                            Rect{
                                height = gridPlotheight
                                width = gridPlotWidth-1
                                fill = item.substring(0,2)=="c_"? d.color:(d.data=="NA"? "#C0C0C0":(item == "n_age"? ageColorScheme.get((d.data-ageMin)/ageMax):ageColorScheme.get(d.data)))
                                stroke = "white"
                            }
                            behavior:tooltip{
                                content = "Sample Name:" + addNames[d.col-1] + "<br>" +"Clinical Indicators: " + item + "<br>"  + "Value: " + d.data + "<br>" //+ "pValue: " + d.pValue
                            }
                        }
                        
                        }
                    } 
                }
                Container {
                    y = additional.sortaddName.length*gridPlotheight + 15
                    Text {
                        text = "* "  + join(tips)
                        fontSize = 8
                    }
                }
                 
            }
        }
        
    }
}







