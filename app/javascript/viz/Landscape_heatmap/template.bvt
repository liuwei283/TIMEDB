svg{
    Component{
        Container {
            x = 40;y = 30
            Container{
                Rect {
                    x = 20;y = 30
                    width = 180;height = cellList.length *12 + 10
                    stroke = "black"
                    fill = "none"
                }
                Container {
                    x = 21;y = 31
                    @if(oricelllist.length > 22){
                        Container {
                            @let disabled = buttonkey === "1"
                            width = 178; height = cellList.length *12 + 10 - 2
                            Rect.full {
                                fill = disabled ? "#f8f9fa" : "#f8f9fa";
                                behavior:tooltip{
                                    content = "You can switch between showing all cells or the first 22 cells by clicking on this block!"
                                }
                            }
                            Text.centered("...") { x = 50%; y = 30%; fill = "#fff";fontSize = 10 }
                            cursor = disabled ? null:"pointer"
                            on:click = disabled ? null:buttonclick(1)
                        }
                    
                    }
                
                }      
                @for (item, index) in cellList {
                    Rect {
                        key = index
                        x = 30;y = (cellList.length - index) * 12 -2.5 + 30
                        height = 5;width = 12
                        fill = RNAData.stackescolors[index]
                    }
                    Text {
                        key = index
                        x = 50;y = (cellList.length - index) * 12 - 5 + 30
                        text = item
                        fill = "#000"
                        fontSize = 10
                    }
                }
            }
            Container {
                x = 260 + gridPlotWidth - 10 ; y = 30
                XYPlot {
                    height = cellList.length *12 + 10;
                    width = RNAData.useData[sampleList.length-1].col*(gridPlotWidth-2)
                    discreteCategory = true
                    valueRange = [0,1]
                    hasPadding = true
                    data = RNAData.result
                    Rect{
                        width = 100%;height = 100%
                        stroke = "none"
                        fill = "none"
                    }
                    stackedData = {
                        stacked: RNAData.classifications
                    }
                    StackedBars {
                        data = "stacked"   
                        :children(d){
                            Rect.full{
                                //@expr console.log("d???:",d)
                                fill = RNAData.colorMap[d.key]
                                stroke = "white"
                                strokeWidth = 0.5
                                on:mouseenter = setActive(d.data.pos)
                                on:mouseleave = setActive(null)
                                behavior:tooltip{
                                    content = `Sample Name: ${d.data.data[0]} <br> Cell:${d.key} <br> Values: ${d.data.data[1]}<br>`
                                }
                                width = gridPlotWidth-1
                            }
                        }
                    }
                }
            }
        }
        
        Container{
            x = 40;y = cellList.length *12 + 90
            Container {
                x = 280 + RNAData.useData[sampleList.length-1].col*(gridPlotWidth-2)
                @for(d,i) in RNAData.columns{
                    @if(d != "P-value"){
                        Text {
                            text = d
                            y = (i+1)*(gridPlotheight) + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 10
                        }
                    }
                }
            }
            Container {
                x = 252; 
                @for(d,i) in RNAData.useData{
                    Component {
                        key = i
                        x = d.col * (gridPlotWidth-2)
                        y = d.row * gridPlotheight
                        Rect.full{
                            height = gridPlotheight
                            width = gridPlotWidth -1
                            fill = d.data>=0? gbcolorScheme.get(d.data/maxxx):colorScheme.get(d.data/-maxxx)
                            stroke = "white"
                            on:mouseenter = setActive(addNames[d.col-1])
                            on:mouseleave = setActive(null)
                            behavior:tooltip{
                                content = "Sample Name:" + addNames[d.col-1] + "<br>" + "Cell: "+d.name +"<br>" + "Value:"+d.data + "<br>"
                            }
                        }
                    }
                }
            }
            
        }
        Container {
            x = 40;y = cellList.length *12 + 90
            Rect{
                x = 190;y = RNAData.useData[0].row*gridPlotheight
                fill = @gradient("gb")
                weidth = 50
                height = cellList.length*gridPlotheight/2
            }
            Rect{
                x = 190;y = RNAData.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2
                fill = @gradient("kg")
                weidth = 50
                height = cellList.length*gridPlotheight/2
            }
            Axis{
                x = 210;y = RNAData.useData[0].row*gridPlotheight
                yScale = @scale-linear(0,textmaxxx, cellList.length*gridPlotheight/2, 0)
                orientation = "right"
            }
            Axis{
                x = 210;y = RNAData.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2
                yScale = @scale-linear(0, -textmaxxx, 0, cellList.length*gridPlotheight/2)
                orientation = "right"
            }
        }
        Container {
            XYPlot {
                x = 260; y = cellList.length *12 + 50
                rotation = @rotate(90)
                height = plotSize[0] + 10
                width = RNAData.useData[0].row*gridPlotheight + cellList.length*gridPlotheight + 100
                padding = padding
                data = { boxData: RNAData.boxdata}
                valueRange = valueRange
                AxisBackground {
                    orientation = "vertical"
                    includeEndTicks = true
                    dashArray = "1, 2"
                }
                Rect{
                    width = 100%
                    height = 100%
                    stroke = "#000"
                    fill = "none"
                }
                Boxes {
                    showMean = true
                    data = "boxData"
                    :box (_d) {
                        Rect.full  {
                            fill = colors[0]
                            stroke = "#003366"
                            x = 33%
                            width = 33%
                        }
                    }
                    :median(d) {}
                    :mean(means) {
                        Line {x1 = 33%; x2 = 66%; stroke = "#000"}
                    }
                    :whiskle (d) {
                        Line { x1 = 41.25%; x2 = 57.75%; y1 = 0; y2 = 0; stroke = "#000" }
                        Line { x1 = 41.25%; x2 = 57.75%; y1 = 100%; y2 = 100%; stroke = "#000" }
                        Line { x1 = 50%; x2 = 50%; y1 = 0; y2 = 100%; stroke = "#0078d7"; dashArray = "3, 2" }
                    }
                }
                Axis("left");
                Component {
                    x = -25; y = 50%
                    rotation = @rotate(-90)
                }
            }   
        }
        Container {
            x = 20;
            Container {
                Container {
                    Component{
                        width = 180
                        height = (sortaddName.length-1) * gridPlotheight
                        x = 40;y = cellList.length * gridPlotheight + cellList.length *12 + 150 + 12.2
                        @for(item,index) in ClinicalData.sortaddName{
                            @for(d,i) in legendLoc[item]{
                                Component {
                                    x = d.x; 
                                    y = (d.row-1)*gridPlotheight
                                    @if(d.data!="NA" && legendType[item].length!=1){
                                        Rect{
                                            x = -1
                                            height = gridPlotheight
                                            width = (180-NAlength) / (d.num-1)
                                            stroke = "white"
                                            fill = item.substring(0,2)=="n_"? @gradient("age"):d.colors
                                        }
                                        Text.centered{
                                            text = replaceUpper(d.data,(180-NAlength) / (d.num-1))
                                            fontSize = 8
                                            x = (180-NAlength)/(d.num-1) * 0.5
                                            y = gridPlotheight/2
                                            behavior:tooltip{
                                                content = "Clinical Category:" + item + "<br>"+"Type Full Name:" + d.data + "<br>" + "Sample Size:" + d.sampleSize
                                            }
                                        }
                                    }
                                    @elsif(d.data=="NA" && legendType[item].length!=1){
                                        Rect{
                                            height = gridPlotheight
                                            width = NAlength
                                            stroke = "white"
                                            fill = d.colors  
                                            behavior:tooltip{
                                                content = "Clinical Category:" + item + "<br>"+"Type Full Name:" + d.data + "<br>" + "Sample Size:" + d.sampleSize
                                            }   
                                        }
                                        Text.centered{
                                            text = d.data
                                            fontSize = 8
                                            x = NAlength/2;y = gridPlotheight/2
                                            anchor = @anchor("middle", "center") 
                                            behavior:tooltip{
                                                content = "Clinical Category:" + item + "<br>"+"Type Full Name:" + d.data + "<br>" + "Sample Size:" + d.sampleSize
                                            }
                                        }
                                    }
                                    @elsif(d.data=="NA" && legendType[item].length==1){
                                        Rect{
                                            height = gridPlotheight
                                            width = 180
                                            stroke = "white"
                                            fill = d.colors     
                                        }
                                        Text.centered{
                                            text = d.data
                                            fontSize = 8
                                            x = 90;y = gridPlotheight/2
                                            anchor = @anchor("middle", "center") 
                                            behavior:tooltip{
                                                content = "Clinical Category:" + item + "<br>"+"Type Full Name:" + d.data + "<br>" + "Sample Size:" + d.sampleSize
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        @for(item,index) in n_legendData{
                            Text.centered {
                                x = NAlength+10;y = (item.row-0.5)*gridPlotheight
                                text = item.min
                                fontSize = 8
                            }
                            Text.centered {
                                x = 170;y = (item.row-0.5)*gridPlotheight
                                text = item.max
                                fontSize = 8
                            }

                        }
                    }
                }
            }
            Container {
                Text.centered{
                    text = title;fontSize = 14;
                    x = sampleList.length*gridPlotWidth/2 + 200; 
                    y = cellList.length * gridPlotheight + cellList.length *12 + 150 -14;
                }
            }
            Container {
                x = 40;y = cellList.length * gridPlotheight + cellList.length *12 + 150
                Container {
                    x = 260 + RNAData.useData[sampleList.length-1].col*(gridPlotWidth-2)
                    @for(d,i) in ClinicalData.sortaddName {
                        Text {
                            text = d.slice(2).replace(/_/g," ")
                            y = i * gridPlotheight + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 10
                        }
                    }
                }
                Container {
                    x = 232;
                    @for(item,index) in ClinicalData.sortaddName{
                        @for(d,dindex) in heatmapLoc[item]{
                            Component {
                                x = d.col * (gridPlotWidth-2)
                                y = (d.row-23) * gridPlotheight 
                                Rect{
                                    height = gridPlotheight
                                    width = gridPlotWidth-1
                                    fill = item.substring(0,2)=="c_"? d.color:(d.data=="NA"? "#C0C0C0":(item.substring(0,2) == "n_"? ageColorScheme.get((d.data-n_color[item].min)/n_color[item].max):ageColorScheme.get(d.data)))
                                    stroke = "white"
                                    on:mouseenter = setActive(addNames[d.col-1])
                                    on:mouseleave = setActive(null)
                                    behavior:tooltip{
                                        content = "Sample Name:" + addNames[d.col-1] + "<br>" +"Clinical Indicators: " + item + "<br>"  + "Value: " + d.data + "<br>" //+ "pValue: " + d.pValue
                                    }
                                }
                                
                            }
                        }
                    } 
                }
                 
            }
        }

        @if (state.activeX !== null && setPlot==true){
                Rect {
                    x = state.activeX;
                    y = 60
                    height = cellList.length *12 + 10
                    width = gridPlotWidth-2
                    stroke = "#000"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
                Rect {
                    x = state.activeX;
                    y = cellList.length *12 + 50 + 51
                    height = RNAData.useData[0].row*gridPlotheight + (cellList.length-1)*gridPlotheight
                    width = gridPlotWidth-2
                    stroke = "#000"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
                Rect {
                    x = state.activeX;
                    y = (cellList.length-1) * gridPlotheight + cellList.length *12 + 150 + 12.2
                    // height = (cellList.length-1) *12 + 10
                    height = ClinicalData.sortaddName.length*12
                    //@expr console.log("ClinicalData.sortaddName:",ClinicalData.sortaddName.length)
                    width = gridPlotWidth-2
                    stroke = "#000"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
        }
        
    }
}







