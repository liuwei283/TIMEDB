svg {
	width = 1000
	height = 800
	Component {
		Component {
			x = 100; y = 100
			Legend {
				x = 425; y = 30
				anchor = @anchor("top", "right")
				data = ClinicalData.colorMap.legendData()
			}
		}
		@for plot in plots {
			Component {
				@let data = plotData[plot]
				x = data.startX; y = data.startY
				// @let showOs = ClinicalData.survivalData[plot] != null && Object.values(ClinicalData.survivalData[plot]).reduce((prev, curr) => prev || (!isNaN(curr) && curr != null && curr != []), false) 
				// @expr console.log(ClinicalData.survivalData[plot])
				// @expr console.log(ClinicalData.survivalData[plot] != null && Object.values(ClinicalData.survivalData[plot]).reduce((prev, curr) => prev || (curr != null && curr != [] && curr.reduce((prev, curr) => prev || !isNaN(curr), false)), false))
				// @let show = ClinicalData.survivalData[plot] != null && Object.values(ClinicalData.survivalData[plot]).reduce((prev, curr) => prev || (curr != null && curr != [] && curr.reduce((prev, curr) => prev || !isNaN(curr), false)), false)
				// @expr console.log(show)
				@if show[plot] {
					SurvivalLine {
						rawData = ClinicalData.survivalData[plot]
						classifications = ClinicalData.classifications.filter(c => ClinicalData.survivalData[plot][c].length > 0)
						title = data.title
						xlabel = data.xlabel
						ylabel = data.ylabel
						plotSize = [data.width, data.height]
						// xAxis.rotation = data.xRotation
						titleSize = data.titleSize
						labelSize = data.labelSize
						// yLabel.fontSize = data.labelSize
						colorMap = data.groups
					}
				}
				@else {
					Component {
						width = 300
						height = 300
						Rect.full {
							fill = "none"
							stroke = "black"
						}
						Text.centered {
							x = 50%
							y = 50%
							fontSize = 20
							text = "No valide " + plot.toUpperCase() + " information"
						}
					}
				}
			}
		}
	}
}