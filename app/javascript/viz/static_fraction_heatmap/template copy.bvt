svg{
    //width = 1400; height = 1000
    Component{
        //stackPlot
        Container {
            x = 40;y = 30
            //图例
            Container{
                Rect {
                    x = 20;y = 30
                    width = 180;height = cellList.length *15 + 10
                    //@expr console.log("height:",result.classifications.length *15 + 10)
                    stroke = "black"
                    fill = "none"
                }      
                @for (item, index) in cellList {
                    Rect {
                        key = index
                        x = 30;y = (cellList.length - index) * 15 -2.5 + 30
                        height = 5;width = 12
                        fill = result.stackescolors[index]
                    }
                    Text {
                        key = index
                        x = 50;y = (cellList.length - index) * 15 - 5 + 30
                        text = item
                        fill = "#000"
                        fontSize = 10
                    }
                }
            }
            //stackBar
            Container {
                x = 180; y = -50
                //x = 180; y = 200
                
                    XYPlot {
                    //@expr console.log("??",result.useData[407].col)
                    //@expr console.log("",sampleList.length)
                    height = cellList.length *15 + 170;
                    //height = cellList.length *10;
                    width = result.useData[sampleList.length-1].col*(gridPlotWidth) //sampleList.length*(gridPlotWidth-1)
                    //width = result.useData[sampleList.length-1].col*(gridPlotWidth-1.6) - 5 -115
                    
                    //width = stackdis
                    // @expr console.log("stackBar width:",result.useData[sampleList.length-1].col*(gridPlotWidth))
                    //width这里存疑 result.useData[sampleList.length-1].col*(gridPlotWidth-1.6) - 5
                    padding = 80
                    discreteCategory = true
                    valueRange = [0,1]
                    hasPadding = true
                    data = result.result
                    // @expr console.log("result.result",result.result)
                    Rect{
                        width = 100%;height = cellList.length *15
			            stroke = "none"
			            fill = "none"
                    }
                    // @expr console.log("result.classifications:",result.classifications)
                    stackedData = {
                        stacked: result.classifications
                        
                    }
                    StackedBars {
                        data = "stacked"   
                        :children(d){
                            //@expr console.log("d",d)
                            Rect.full{
                                //@expr console.log("d",d)
                                fill = result.colorMap[d.key]
                                stroke = "white"
                                behavior:tooltip{
                                    content = `Sample Name: ${d.data.data[0]} <br> Cell:${d.key} <br> Values: ${d.data.data[1]}<br>`
                                }
                                width = gridPlotWidth-2
                                //@expr console.log("gridWidth:",gridWidth)
                            }
                        }
                    }
                }

                
                
            }
        }

        // 中间的heatmap
        Container{
            x = 40;y = cellList.length *15 + 90
            //右中文字
            Container {
                //x = result.useData[sampleList.length-1].col*(gridPlotWidth-1.6)-5 + 140; //y = cellList.length *20
                x = result.useData[sampleList.length-1].col*(gridPlotWidth) + 140 
                // x = result.useData[sampleList.length-1].col*(gridPlotWidth-1.6) - 5 + 35
                //x = middleTextdis
                @for(d,i) in result.columns{
                    @if(d != "P-value"){
                        Text {
                            text = d
                            y = (i+1)*(gridPlotheight) + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 10
                        }
                    }
                }
            }
            Container {
                x = 252; //y = cellList.length *20
                @for(d,i) in result.useData{
                    Component {
                        //@expr console.log("result.useData:",result.useData)
                        key = i
                        x = d.col * (gridPlotWidth-2)
                        //@expr console.log("gridPlotWidth:",gridPlotWidth)
                        y = d.row * gridPlotheight
                        Rect.full{
                            height = gridPlotheight
                            width = gridPlotWidth -1
                            fill = d.data>=0? gbcolorScheme.get(d.data/maxxx):colorScheme.get(d.data/-maxxx)
                            //添加边框
                            stroke = "white"
                            behavior:tooltip{
                                content = "Sample Name:" + addNames[d.col-1] + "<br>" + "Cell: "+d.name +"<br>" + "Value:"+d.data + "<br>" //+ "pValue: " + d.pValue
                            }
                        }
                        // @if(d.pValue <= 0.01){
                        //     Text{
                        //         y = rectHeight / 2 -3
                        //         text = "**"
                        //         fontSize = 11
                        //     }
                        // }
                        // @if(d.pValue >0.01 &&d.pValue <= 0.05){
                        //     Text{
                        //         x = rectWidth / 2 -2
                        //         y = rectHeight / 2 -3
                        //         text = "*"
                        //         fontSize = 11                        
                        //     }
                        // }
                    }
                }
            }
            
        }
        //heatmap 的legend
        Container {
            x = 40;y = cellList.length *15 + 90
            //
            Rect{
                x = 190;y = result.useData[0].row*gridPlotheight //红色
                fill = @gradient("gb")
                //rotation = @rotate(180)
                weidth = 50
                height = cellList.length*gridPlotheight/2
            }
            //
            // Rect{
            //     x = 190;y = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2 //蓝色
            //     fill = @gradient("bg")
            //     weidth = 50
            //     height = cellList.length*gridPlotheight/2
            // }
            //负数的
            Axis{
                x = 210;y = result.useData[0].row*gridPlotheight
                yScale = @scale-linear(0,textmaxxx, cellList.length*gridPlotheight/2, 0)
                orientation = "right"
            }
            //正数的
            Axis{
                x = 210;y = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight/2
                yScale = @scale-linear(0, -textmaxxx, 0, cellList.length*gridPlotheight/2)
                orientation = "right"
            }
        }
        //中间左边的box
        Container {
            XYPlot {
                x = 260; y = cellList.length *15 + 50
                rotation = @rotate(90)
		        height = plotSize[0] + 10
		        width = result.useData[0].row*gridPlotheight + cellList.length*gridPlotheight + 100
		        padding = padding
		        data = { boxData: result.boxdata}
		        valueRange = valueRange
		        //AxisBackground { dashArray = "1, 2"}
		        AxisBackground {
                    orientation = "vertical"
                    includeEndTicks = true
			        dashArray = "1, 2"
                }
                Rect{
                    width = 100%
			        height = 100%
			        stroke = "#000"
			        fill = "none"
                }
                Boxes {
                    showMean = true
			        data = "boxData"
			        :box (_d) {
                        Rect.full  {
                            //在这里改之前的颜色
                            fill = colors[0]
					        stroke = "#003366"
					        x = 33%
					        width = 33%
				        }
			        }
                    :median(d) {}
                    :mean(means) {
                        Line {x1 = 33%; x2 = 66%; stroke = "#000"}
                    }
                    :whiskle (d) {
				        Line { x1 = 41.25%; x2 = 57.75%; y1 = 0; y2 = 0; stroke = "#000" }
				        Line { x1 = 41.25%; x2 = 57.75%; y1 = 100%; y2 = 100%; stroke = "#000" }
				        Line { x1 = 50%; x2 = 50%; y1 = 0; y2 = 100%; stroke = "#0078d7"; dashArray = "3, 2" }
                    }
		        }
                Axis("left");
                Component {
                    x = -25; y = 50%
                    rotation = @rotate(-90)
                }
	        }   
        }
        // Container {
        //     Rect {
        //         x = 200;y = 300
        //         width = 40;height = 40
        //         rotation = @rotate(-90)
        //         fill = @gradient("bg")
        //         //fill = colorScheme.get("0.071895425") //根据数值
        //     }
        // }

        //legend
        Container {
            x = 20;
            Container {
                Container {
                    Component{
                        width = 180
                        height = (sortaddName.length-1) * gridPlotheight
                        x = 40;y = thirdLen + 15
                        Rect {
                            width = 100%
                            height = 100%
                            stroke = "white"
                            fill = "white"
                        }
                        @for(item,index) in additional.sortaddName{
                            @for(d,i) in legendLoc[item]{
                                Component {
                                    x = d.x; 
                                    y = (d.row-1)*gridPlotheight
                                    @if(d.data!="NA"){
                                        Rect{
                                            height = gridPlotheight
                                            width = (180-NAlength) / (d.num-1)
                                            
                                            stroke = "white"
                                            fill = item.substring(0,2)=="n_"? @gradient("age"):d.colors
                                            //rotation = @rotate(-90)
                                        }
                                        Text.centered{
                                            text = replaceUpper(d.data,(180-NAlength) / (d.num-1))
                                            fontSize = 8
                                            //x = d.textx;
                                            x = (180-NAlength)/(d.num-1) * 0.5
                                            y = gridPlotheight/2
                                            anchor = @anchor("middle", "center") 
                                        }
                                    }
                                    @elsif(d.data=="NA"){
                                        Rect{
                                            height = gridPlotheight
                                            width = NAlength
                                            stroke = "white"
                                            fill = d.colors     
                                        }
                                        Text.centered{
                                            text = d.data
                                            fontSize = 8
                                            x = NAlength/2;y = 8
                                            anchor = @anchor("middle", "center") 
                                        }
                                    }
                                }
                            }
                        }
                        //显示年龄
                        Text.centered {
                            x = 45;y = (ageRow-0.5)*gridPlotheight
                            text = ageMin
                            fontSize = 8
                        }
                        Text.centered {
                            x = 170;y = (ageRow-0.5)*gridPlotheight
                            text = ageMax
                            fontSize = 8
                        }
                        
                        // @for(d,i) in additional.tLegend {
                        //     Component {
                        //         x = (180 / d.num)  * i 
                        //         y = 1 * rectHeight
                        //         Rect{
                        //             height = rectHeight
                        //             width = 180 / d.num
                        //             //fill = d.colors     
                        //         }
                        //         Text{
                        //             text = d.data
                        //             fontSize = 9
                        //             x = 18;y = 9
                        //             anchor = @anchor("middle", "center") 
                        //         }
                        //     }
                        // }
                        // //年龄的标注
                        // Text{
                        //     text = 20
                        //     fontSize = 10
                        //     x = 10;y = 6 * rectHeight
                        // }
                        // Text {
                        //     text = 70
                        //     fontSize = 10
                        //     x = 156
                        //     y = 6 * rectHeight
                        // }
                    }
                }
            }
            Container {
                //clinical标题
                Text.centered{
                    text = title;fontSize = 14;
                    x = sampleList.length*gridPlotWidth/2 + 200; 
                    y = thirdLen-14 ;}
            }
            Container {
                x = 40;y = thirdLen
                //clinical rownames
                //clinical indexes
                Container {
                    //x = result.useData[sampleList.length-1].col*(gridPlotWidth-1.6) + 120
                    x = result.useData[sampleList.length-1].col*(gridPlotWidth) + 120
                    //x = middleTextdis - 15
                    @for(d,i) in additional.sortaddName {
                        Text {
                            text = d.slice(2).replace(/_/g," ")
                            //x = ;
                            y = i * gridPlotheight + gridPlotheight/2
                            anchor = @anchor("left", "middle")
                            fontSize = 11
                        }
                    }
                }
                //heatmap
                Container {
                    x = 232;
                    @for(item,index) in additional.sortaddName{
                        @for(d,dindex) in heatmapLoc[item]{
                        Component {
                            //x = (d.col + 19) * (rectWidth-0.67) + 86
                            x = d.col * (gridPlotWidth-2)
                            y = (d.row-23) * gridPlotheight //+ (cellList * gridPlotheight + cellList.length *15 + 90)
                            Rect{
                                height = gridPlotheight
                                width = gridPlotWidth-1
                                fill = item.substring(0,2)=="c_"? d.color:(d.data=="NA"? "#C0C0C0":(item == "n_age"? ageColorScheme.get((d.data-ageMin)/ageMax):ageColorScheme.get(d.data)))
                                stroke = "white"
                            }
                            // @if(d.data == "NA"){
                            //     Line {
                            //         x1 = (gridPlotWidth-2);y1 = 1
                            //         x2 = 1;y2 = gridPlotheight-1
                            //         fill = "red"
                            //     }
                            // }
                            behavior:tooltip{
                                content = "Sample Name:" + addNames[d.col-1] + "<br>" +"Clinical Indicators: " + item + "<br>"  + "Value: " + d.data + "<br>" //+ "pValue: " + d.pValue
                            }
                        }
                        
                        }
                    } 
                }
                Container {
                    y = additional.sortaddName.length*gridPlotheight + 15
                    Text {
                        text = "* "  + join(tips)
                        fontSize = 8
                    }
                }
                 
            }
        }
        
    }
}







