svg {
	width = 1100; height = 650
	XYPlot {
		x = 40; y = 20
		height = 500
		width = config.plotWidth
		valueRange = valueRange
		gap = gridW * 0.2
		data = {
			boxData1: boxData[0],
			boxData2: boxData[1]
		}
		AxisBackground { dashArray = "1, 2" }
		AxisBackground {
			orientation = "vertical"
			includeEndTicks = true
			dashArray = "1, 2"
		}
		Rect{
			width = 100%
			height = 100%
			stroke = "#000"
			fill = "none"
		}
		@for (item, index) in boxData{
			Boxes {
				key = index
				data = "boxData" + (index + 1).toString()
				showMean = true
				showNotch = false
				x = index * (boxW + boxGap) - 2
				@let boxStroke = colors[index]
				@let whiskleD = 5
				:box (_d) {
					Rect  {
						fill = "white"
						stroke = boxStroke; strokeWidth = 1.5
						behavior:tooltip {
							content = (`min: ${_d.data[0].toFixed(2)} <br>
										first quartile: ${_d.data[1].toFixed(2)} <br>
										median: ${_d.data[2].toFixed(2)} <br>
										third quartile: ${_d.data[3].toFixed(2)} <br>
										max: ${_d.data[4].toFixed(2)} <br>`)
						}
						// x = 33%; width = 33%
						width = boxW; height = 100%
					}
				}
				// :whiskle (d) {
				// 	Line { x1 = 50%; x2 = 50%; y1 = 0; y2 = 100%; stroke = colors[index];
				// 	}
				// }
				// :outlier{
				// 	@if config.showOutliers {
				// 		Circle.centered { r = 2; fill = colors[index] }
				// 	} @else {
				// 		Circle.centered { fill = "none" }
				// 	}
				// }
				// :mean(means) {
				// 	Line {x1 = 33%; x2 = 66%; stroke = colors[index]}
				// }
				// :median(d) {}
				:whiskle (d) {
					Line { 
						x =  boxW / 2; y1 = 0; y2 = 100%; 
						stroke = boxStroke;strokeWidth = 2
					}
				}
				:outlier(o){
					@if config.showOutliers {
						Circle.centered { 
							r = 2
							x = -boxW * 0.5
							fill = colors[index] 
						}
					} @else {
						Circle.centered { fill = "none" }
					}
				}
				:mean(means) {
					// Line {x1 = 33%; x2 = 66%; stroke = colors[index]}
				}
				:median(d) {
					Line { x2 =  boxW; stroke = boxStroke; strokeWidth = 2}
				}
			}
		}
		Axis("left");
		Axis("bottom") {
			y = 100%
			:label (tick) {
				Text {
					text = tick.value + "  "
					rotation = @rotate(-config.xLabelRotation)
					anchor = @anchor("r", "m")
					fontSize = 13
				}
			}
		}
		// Text {text = title; anchor = @anchor("bottom", "center"); x = 50%; y = -7; fontSize = 14}
		Component {
			x = -25; y = 50%
			rotation = @rotate(-90)
			Text(ylabel) { anchor = @anchor("bottom", "center") }
		}
		Component{
			x = 5%; y = 90%
			@for (item, index) in classifications{
				Line { key = index; x1 = 7.5; x2 = 7.5; y1 = 24 * index - 10; y2 = 24 * index + 10; stroke = colors[index] }
				
				Rect {
					key = index
					x = 0
					y = index * 24
					height = 10
					width = 15
					anchor = @anchor("middle","left")
					fill = "white"
					stroke = colors[index]
				}
				Line { key = [index, 1]; x1 = 0; x2 = 15; y1 = 24 * index; y2 = 24 * index; stroke = colors[index] }
				Text{
					x = 20
					y = index * 24
					key = index
					anchor = @anchor("middle","left")
					text = item
					fill = "#000"
					fontSize = 12
				}
			}
		}
	}
}