svg {
    height = 1500
    width = 1000
    
    Columns{
        x = 50; y = 50
        @if rowTreeData {
            Container{
                y=colTreeData? colheatmapData.draw*config.colTree.treeHeight:0
                    Tree {
                        height = heatmapData.heatlength*config.gridH
                        width = config.treewidth
                        data = rowTreeData
                        direction = "right"
                        link.stroke = "#000"
                        :leaf {
                        }
                    }
            }
        }
        Container {
            x=-20
            @if groupData {
                Rows{
                    width = config.gridW*2.5
                    y = colTreeData ? config.colTree.treeHeight : 0
                    @for s in groupData {
                        Component {
                            height = config.gridH
                            Rect {
                                width = config.gridW; height = config.gridH
                                fill = s.Enrichemnt === "Control" ? colors.group1 : colors.group2
                                behavior:tooltip {
                                        content = `Species: ${s.Species}</br>Enrichment: ${s.Enrichemnt}`
                                }  
                            }
                            Rect {
                                width = config.gridW; height = config.gridH; x = config.gridW+5
                                fill = (s.Genus === "Unknown" ? familyColorMap[s.Phylum][`Other ${s.Phylum}`]
                                    : familyColorMap[s.Phylum][s.Genus])
                                behavior:tooltip {
                                        content = `Species: ${s.Species}</br>Phylum: ${s.Phylum}</br> Genus: ${s.Genus}`
                                }    
                            }
                        }
                    }
                    Component {
                        Text {
                            text = "Enrichment "
                            x = config.gridW/2
                            anchor = @anchor("r","m")
                            rotation = @rotate(-90)
                        }

                        Text {
                            text = "Family "
                            x = config.gridW*1.5+5
                            anchor = @anchor("r","m")
                            rotation = @rotate(-90)
                        }
                    }
                }
            }
        }
        Container{ 
            Rows {
                @if colTreeData {
                    BinaryTree {
                        x = 15
                        height = config.colTree.treeHeight
                        treeNode = colTreeData
                        gravity = config.colTree.gravity
                        depthUnit = config.colTree.depthUnit
                        posUnit = 30
                        parentsPos = 0
                        parentsDep = 0
                    }
                    
                }
                SignedHeatMap {
                    data = heatmapData.data
                    gridW = config.gridW
                    gridH = config.gridH
                    columns = heatmapData.columns
                    rows = heatmapData.rows
                    startColor = colors.origin
                    positiveEndColor = colors["positive range"]
                    negativeEndColor = colors["negative range"]
                    
                    dataRange = [config.rangeMin, config.rangeMax]
                    symRange = config.isSym
                    showPAnno = heatmapDataP
                    
                    :groupLegend {
                        @if groupData {
                            Rows { // legend area
                                width = 150
                                Component {
                                    height = 20
                                    Text {
                                        text = "Taxa"
                                    }
                                }
                                @for p in Object.keys(phylums) {
                                    Rows {
                                        Component {
                                            height = 20
                                            Text {
                                                y = 5
                                                text = p
                                            }
                                        }
                                        @for g in phylums[p] {
                                            Component {
                                                height = 10
                                                Rect {
                                                    width = 20; height = 10
                                                    fill = familyColorMap[p][g]
                                                }
                                                Text {
                                                    x = 22
                                                    text = g
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
        }

        // @if groupData {
        //     Rows{
        //         width = 70
        //         y = colTreeData ? config.colTree.treeHeight : 0
        //         @for s in groupData {
        //             Component {
        //                 height = config.gridH
        //                 Rect {
        //                     width = 30; height = config.gridH
        //                     fill = s.Enrichemnt === "Control" ? colors.group1 : colors.group2
        //                     behavior:tooltip {
        //                             content = `Species: ${s.Species}</br>Enrichment: ${s.Enrichemnt}`
        //                     }  
        //                 }
        //                 Rect {
        //                     width = 30; height = config.gridH.gridH; x = 35
        //                     fill = (s.Genus === "Unknown" ? familyColorMap[s.Phylum][`Other ${s.Phylum}`]
        //                         : familyColorMap[s.Phylum][s.Genus])
        //                     behavior:tooltip {
        //                             content = `Species: ${s.Species}</br>Phylum: ${s.Phylum}</br> Genus: ${s.Genus}`
        //                     }    
        //                 }
        //             }
        //         }
        //         Component {
        //             Text {
        //                 text = "Enrichment "
        //                 x = config.gridH
        //                 anchor = @anchor("r","m")
        //                 rotation = @rotate(-90)
        //             }

        //             Text {
        //                 text = "Family "
        //                 x = 50
        //                 anchor = @anchor("r","m")
        //                 rotation = @rotate(-90)
        //             }
        //         }
        //     }
        // }
        
        // Rows {
        //     @if colTreeData {
        //         BinaryTree {
        //             x = 15
        //             height = config.colTree.treeHeight
        //             treeNode = colTreeData
        //             gravity = config.colTree.gravity
        //             depthUnit = config.colTree.depthUnit
        //             posUnit = 30
        //             parentsPos = 0
        //             parentsDep = 0
        //         }
                
        //     }
        //     SignedHeatMap {
        //         data = heatmapData.data
        //         gridW = 30
        //         gridH = config.gridH
        //         columns = heatmapData.columns
        //         rows = heatmapData.rows
        //         startColor = colors.origin
        //         positiveEndColor = colors["positive range"]
        //         negativeEndColor = colors["negative range"]
                
        //         dataRange = [config.rangeMin, config.rangeMax]
        //         symRange = config.isSym
        //         showPAnno = config.showPAnno
                
        //         :groupLegend {
        //             @if groupData {
        //                 Rows { // legend area
        //                     width = 150
        //                     Component {
        //                         height = 20
        //                         Text {
        //                             text = "Taxa"
        //                         }
        //                     }
        //                     @for p in Object.keys(phylums) {
        //                         Rows {
        //                             Component {
        //                                 height = 20
        //                                 Text {
        //                                     y = 5
        //                                     text = p
        //                                 }
        //                             }
        //                             @for g in phylums[p] {
        //                                 Component {
        //                                     height = 10
        //                                     Rect {
        //                                         width = 20; height = 10
        //                                         fill = familyColorMap[p][g]
        //                                     }
        //                                     Text {
        //                                         x = 22
        //                                         text = g
        //                                     }
        //                                 }
        //                             }
        //                         }
        //                     }

        //                 }
        //             }
        //         }
        //     }
        // }
    }
}